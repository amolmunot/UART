module tb-new;
// Inputs
reg [7:0] TX_DATA;
reg shift;
reg load_data;
reg clk;
reg reset;
// Outputs
wire DATA_BIT;
// Instantiate the Unit Under Test (UUT)
piso uut (
.DATA_BIT(DATA_BIT),
.TX_DATA(TX_DATA),
.shift(shift),
.load_data(load_data),
.clk(clk),
.reset(reset)
);
initial begin
// Initialize Inputs
TX_DATA = 0;
shift = 0;
load_data = 0;
clk = 0;
reset = 0;
// Wait 100 ns for global reset to finish
#100;
// Add stimulus here
end
endmodule

//tb_uart_top_module.v 
module tb_uart_top_module;
// Inputs
reg [1:0]sel;
reg TX_bit;
reg [7:0] TX_DATA;
reg clk;
reg reset;
// Outputs
wire stop_error;
wire parity_error;
wire [7:0] RX_dataout;
// Instantiate the Unit Under Test (UUT)
UART_top_module uut (
.stop_error(stop_error),
.parity_error(parity_error),
.RX_dataout(RX_dataout),
.sel(sel),
.TX_bit(TX_bit),
.TX_DATA(TX_DATA),
.clk(clk),
.reset(reset)
);
initial begin
clk=0;
# 10 sel = 2'b10;
TX_bit = 1;
TX_DATA = 8'b10101010;
reset = 1;
end
always #10 clk=~clk;
endmodule
tb_transmitter.v 
module tb_transmitter;
// Inputs
reg clk;
reg reset;
reg TX_bit;
reg [7:0] TX_DATA;
// Outputs
wire TX_dataout;
// Instantiate the Unit Under Test (UUT)
Transmitter uut (
.TX_dataout(TX_dataout),
.clk(clk),
.reset(reset),
.TX_bit(TX_bit),
.TX_DATA(TX_DATA)
);
initial begin
// Initialize Inputs
clk = 0;
#10
reset = 1;
TX_bit = 1;
TX_DATA = 10010101;
end
always #10 clk=~clk;
endmodule

//tb_sipo.v 
module tb_sipo;
// Inputs
reg RX_in;
reg shift;
reg clk;
reg reset;
// Outputs
wire [7:0] RX_DATA;
// Instantiate the Unit Under Test (UUT)
SIPO uut (
.RX_DATA(RX_DATA),
.RX_in(RX_in),
.shift(shift),
.clk(clk),
.reset(reset)
);
initial begin
clk=0;
#10 reset=1;
RX_in=1;
shift=1;
end
always #10 clk=~clk;
initial
$monitor("$time=%,reset=%b",$time,reset);
endmodule
tb_receiver.v 
module tb_receiver;
// Inputs
reg RX_in;
reg clk;
reg reset;
// Outputs
wire stop_error;
wire [7:0] RX_dataout;
wire parity_error;
// Instantiate the Unit Under Test (UUT)
Receiver uut (
.stop_error(stop_error),
.RX_dataout(RX_dataout),
.RX_in(RX_in),
.clk(clk),
.reset(reset),
.parity_error(parity_error)
);
initial begin
clk=0;
#10 RX_in=1;
//RX_DATA=10101010;
reset=1;
end
always #10 clk=~clk;
endmodule

//tb_piso.v 
module tb_piso;
// Inputs
reg [7:0] TX_DATA;
reg shift;
reg load_data;
reg clk;
reg reset;
// Outputs
wire DATA_BIT;
// Instantiate the Unit Under Test (UUT)
piso uut (
.DATA_BIT(DATA_BIT),
.TX_DATA(TX_DATA),
.shift(shift),
.load_data(load_data),
.clk(clk),
.reset(reset)
);
initial begin
// Initialize Inputs
clk=0;
#10TX_DATA = 8'b10010111;
load_data = 1;
shift=0;
reset = 1;
#10
shift = 1;
load_data=0;
reset = 1;
/*10TX_DATA = 8'b10010111;
shift = 0;
load_data = 0;
clk = 0;
reset = 1;*/
end
always #10 clk=~clk;
endmodule

//tb_parity_checker.v 
module tb_paritychecker;
// Inputs
reg RX_in;
reg [7:0]RX_DATA;
// reg clk;
reg parity_load;
// Outputs
wire parity_error;
// Instantiate the Unit Under Test (UUT)
Parity_checker uut (
.parity_error(parity_error),
.RX_in(RX_in),
.RX_DATA(RX_DATA),
.parity_load(parity_load)
);
initial begin
// Initialize Inputs
#10 RX_in = 1;
RX_DATA = 8'b11001101;
parity_load=1;
end
// always #10 clk=~clk;
endmodule

//tb_parity.v 
module tb_parity;
// Inputs
reg [7:0] TX_DATA;
reg load_data;
// Outputs
wire PARITY_BIT;
// Instantiate the Unit Under Test (UUT)
PARITY_GENERATOR uut (
.PARITY_BIT(PARITY_BIT),
.TX_DATA(TX_DATA),
.load_data(load_data)
);
initial begin
// Initialize Inputs
#10 load_data = 1;
TX_DATA = 10010101;
end
endmodule

//tb_mux.v 
module tb_mux;
// Inputs
reg START_BIT;
reg DATA_BIT;
reg PARITY_BIT;
reg STOP_BIT;
reg s0;
reg s1;
// Outputs
wire TX_dataout;
// Instantiate the Unit Under Test (UUT)
mux_4x1 uut (
.TX_dataout(TX_dataout),
.START_BIT(START_BIT),
.DATA_BIT(DATA_BIT),
.PARITY_BIT(PARITY_BIT),
.STOP_BIT(STOP_BIT),
.s0(s0),
.s1(s1)
);
initial begin
// Initialize Inputs
START_BIT = 1;
DATA_BIT = 1;
PARITY_BIT = 0;
STOP_BIT = 0;
s0 = 0;
s1 = 0;
#10 s0=1;
#10 s1=1;
#10 s0=0;
// Wait 100 ns for global reset to finish
#100;
// Add stimulus here
end
endmodule

//tb_detect_start.v 
module tb_detectstart;
// Inputs
reg RX_in;
reg clk;
reg reset;
// Outputs
wire de_strtbit;
// Instantiate the Unit Under Test (UUT)
Detect_Start uut (
.de_strtbit(de_strtbit),
.RX_in(RX_in),
.clk(clk),
.reset(reset)
);
initial begin
// Initialize Inputs
clk=0;
#10 RX_in = 1;
reset = 1;
end
always #10 clk=~clk;
// Add stimulus here
endmodule
tb_detect_bit.v
module tb_detect_bit;
// Inputs
reg RX_in;
reg clk;
reg reset;
// Outputs
wire de_strtbit;
// Instantiate the Unit Under Test (UUT)
Detect_Start uut (
.de_strtbit(de_strtbit),
.RX_in(RX_in),
.clk(clk),
.reset(reset)
);
initial begin
clk=0;
#10 reset=1;
RX_in=1;
end
always #10 clk=~clk;
endmodule

//tb_piso.v 
module piso_testbench;
// Inputs
reg d;
reg clk;
reg reset;
// Outputs
wire [7:0] q;
// Instantiate the Unit Under Test (UUT)
piso uut (
.q(q),
.d(d),
.clk(clk),
.reset(reset)
);
/*initial
clk=1;
always #10 clk=~clk;
initial
begin
reset=1;
d=8'b10101110;
#100 reset=0;
#100 reset=1;
end*/
initial
clk=1'b1;
always #10 clk=~clk;
initial begin
rst=1'b1; a=8'b11011110;
#200 rst=1'b0;
#200 rst=1'b1;
end
initial
#1000 $stop;
endmodule

//mux_test.v 
module mux_test;
// Inputs
reg i0;
reg i1;
reg i2;
reg i3;
reg s0;
reg s1;
// Outputs
wire y;
// Instantiate the Unit Under Test (UUT)
mux_4x1 uut (
.y(y),
.i0(i0),
.i1(i1),
.i2(i2),
.i3(i3),
.s0(s0),
.s1(s1)
);
initial begin
// Initialize Inputs
i0 = 1;
i1 = 1;
i2 = 1;
i3 = 1;
s0 = 0;
s1 = 0;
// Wait 100 ns for global reset to finish
#100;
// Add stimulus here
end
endmodule
