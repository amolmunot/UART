module Receiver(stop_error,RX_dataout,RX_in,clk,reset,parity_error);
output[7:0] RX_dataout;
output stop_error,parity_error;
input RX_in,clk,reset;
wire shift,parity_load,parity_error,check_stop, de_strtbit;
wire [7:0]RX_DATA;
Detect_Start t1(de_strtbit,RX_in,clk );
RX_fsm t2(shift,parity_load,check_stop,clk,reset,de_strtbit,parity_error);
SIPO t3(RX_DATA,RX_in,shift,clk, reset);
Parity_checker t4(parity_error,parity_load,RX_in,RX_DATA );
stop_bit_checker t5(stop_error,RX_dataout,check_stop,RX_in,RX_DATA ,clk);
/*Detect_Start t1(de_strtbit,RX_in,clk );
RX_fsm t2(shift,parity_load,check_stop,clk,reset,de_strtbit);
Parity_checker t3(parity_error,parity_load,RX_in,RX_DATA );
stop_bit_checker t4(stop_error,RX_dataout,check_stop,RX_in,RX_DATA ,clk);
SIPO t5(RX_DATA,RX_in,shift,clk, reset);
*/
endmodule

//rx_fsm.v 
module RX_fsm(shift,parity_load,check_stop,clk,reset,de_strtbit,parity_error);
output reg shift,parity_load,check_stop;
input clk, reset,de_strtbit,parity_error;
reg [2:0]state=2'b00, next_state=2'b00;
reg flag1,flag2;
reg temp, temp1;
reg [3:0]x1=0;
reg [3:0]x2=0;
parameter IDLE=3'b000,DATA_BIT=3'b001, PARITY_BIT=3'b010, STOP_BIT=3'b011;
always @(*)
begin
case(state)
IDLE: begin next_state=de_strtbit?DATA_BIT:IDLE
;shift=0;parity_load=0;check_stop=0;temp=0;temp1=0; end
DATA_BIT :begin next_state=flag1?PARITY_BIT:DATA_BIT;shift=1;
parity_load=0;check_stop=0; temp=1;temp1=0; end
PARITY_BIT: begin next_state=parity_error?IDLE:(flag2?STOP_BIT:PARITY_BIT) ;
shift=0;parity_load=1;check_stop=0;temp=0;temp1=1; end
STOP_BIT:begin next_state=flag2?IDLE:STOP_BIT ;shift=0
;parity_load=0;check_stop=1;temp=0;temp1=1; end
default: begin next_state=IDLE; shift=0;parity_load=0;check_stop=0; temp=0;temp1=0; end
endcase
end
always@ (posedge clk,negedge reset)
begin
if(~reset)
state<=IDLE;
else
state<=next_state;
end
always@(posedge clk)
begin
if(temp)
begin
if(x1==4'd6)
begin
flag1=1;
x1=0;
end
else
begin
flag1=0;
x1=x1+1;
end
end
else
begin
x1=0;
flag1=0;
end
end
always@(posedge clk)
begin
if(temp1)
begin
if(x2==4'd15)
begin
flag2=1;
x2=0;
end
else
begin
flag2=0;
x2=x2+1;
end
end
else
begin
x2=0;
flag2=0;
end
end
endmodule

//detect_start.v 
module Detect_Start(de_strtbit,RX_in,clk );
output reg de_strtbit;
input RX_in,clk;
reg [3:0]count=0;
always @(posedge clk)
begin
if(RX_in==0)
begin
if(count==4'd15)
begin
count=0;
de_strtbit=1;
end
else
begin
count=count+1;
de_strtbit=0;
end
end
else
begin
count=0;
de_strtbit=0;
end
end
endmodule

//sipo.v 
module SIPO(RX_DATA,RX_in,shift,clk, reset);
output [7:0]RX_DATA;
input clk, reset,shift, RX_in;
reg [7:0]temp;
always@(posedge clk, negedge reset)
begin
if(reset==0)
begin
temp<=0;
end
else if(shift)
begin
temp[7]<=RX_in;
//temp=temp>>1;
temp[6]<=temp[7];
temp[5]<=temp[6];
temp[4]<=temp[5];
temp[3]<=temp[4];
temp[2]<=temp[3];
temp[1]<=temp[2];
temp[0]<=temp[1];
end
else
temp<=temp;
end
assign RX_DATA=temp;
endmodule

//parity_checker.v 
module Parity_checker(parity_error,parity_load,RX_in,RX_DATA );
output reg parity_error;
input[7:0] RX_DATA;
input RX_in,parity_load;
always @(*)
begin
if(parity_load)
begin
if(RX_in==(^RX_DATA))
parity_error<=0;
else
parity_error<=1;
end
else
parity_error<=0;
end
endmodule

//stop_bit_checker.v 
module stop_bit_checker(stop_error,RX_dataout,check_stop,RX_in,RX_DATA ,clk);
output reg stop_error;
output reg [7:0] RX_dataout;
input RX_in,check_stop,clk;
input[7:0] RX_DATA;
reg [2:0]count=0;
//reg flag;
always @(posedge clk)
begin
if(check_stop==1)
begin
if(RX_in)
begin
if(count==7)
begin
count<=0;
stop_error<=0;
RX_dataout<=RX_DATA;
end
else
begin
count<=count+1;
//stop_error<=0;
//RX_dataout<=RX_dataout;
end
end
else
begin
stop_error<=1;
RX_dataout<=8'h00;
end
end
else
begin
stop_error<=0;
RX_dataout<=RX_DATA;
end
end
endmodule
/*
always @(posedge clk)
begin
if(count==7)
begin
flag=1;
count=0;
end
else
begin
count=count+1;
flag=0;
end
end*/
stop_bit_check.v 
module stop_bitchk(
);
endmodule
